var tipuesearch = {"pages": [{
    "title": "corona &amp; stock price",
    "text": "코로나와 주가 비교 주요국 코로나 사망자 와 코스피 비교 참조 : https://ourworldindata.org/coronavirus 데이터 : https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv 주가 : FinanceDataReader import pandas as pd import FinanceDataReader as fdr import matplotlib.pyplot as plt from matplotlib import font_manager, rc %matplotlib inline import matplotlib as mpl mpl.rc('font', family='Gulim') # 한글폰트 선택 # 맥OS인 경우 위 두 줄을 입력하지 말고 아래 코드를 입력하세요 # rc('font', family='AppleGothic') death = pd.read_csv('https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv') death.shape (44785, 41) death.head() iso_code continent location date total_cases new_cases new_cases_smoothed total_deaths new_deaths new_deaths_smoothed ... gdp_per_capita extreme_poverty cardiovasc_death_rate diabetes_prevalence female_smokers male_smokers handwashing_facilities hospital_beds_per_thousand life_expectancy human_development_index 0 AFG Asia Afghanistan 2019-12-31 0.0 0.0 NaN 0.0 0.0 NaN ... 1803.987 NaN 597.029 9.59 NaN NaN 37.746 0.5 64.83 0.498 1 AFG Asia Afghanistan 2020-01-01 0.0 0.0 NaN 0.0 0.0 NaN ... 1803.987 NaN 597.029 9.59 NaN NaN 37.746 0.5 64.83 0.498 2 AFG Asia Afghanistan 2020-01-02 0.0 0.0 NaN 0.0 0.0 NaN ... 1803.987 NaN 597.029 9.59 NaN NaN 37.746 0.5 64.83 0.498 3 AFG Asia Afghanistan 2020-01-03 0.0 0.0 NaN 0.0 0.0 NaN ... 1803.987 NaN 597.029 9.59 NaN NaN 37.746 0.5 64.83 0.498 4 AFG Asia Afghanistan 2020-01-04 0.0 0.0 NaN 0.0 0.0 NaN ... 1803.987 NaN 597.029 9.59 NaN NaN 37.746 0.5 64.83 0.498 5 rows × 41 columns kor = death[death['location'] == 'South Korea'] kor_death = kor[['date','total_cases','new_cases','total_deaths','new_deaths']] kor_death.iloc[:,0] = kor_death.iloc[:,0].astype('datetime64[ns]') kor_death.set_index(\"date\", inplace=True) kor_death C:\\Users\\masun\\anaconda3\\lib\\site-packages\\pandas\\core\\indexing.py:965: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy self.obj[item] = s total_cases new_cases total_deaths new_deaths date 2019-12-31 0.0 0.0 0.0 0.0 2020-01-01 0.0 0.0 0.0 0.0 2020-01-02 0.0 0.0 0.0 0.0 2020-01-03 0.0 0.0 0.0 0.0 2020-01-04 0.0 0.0 0.0 0.0 ... ... ... ... ... 2020-09-15 22391.0 106.0 367.0 4.0 2020-09-16 22504.0 113.0 367.0 0.0 2020-09-17 22657.0 153.0 372.0 5.0 2020-09-18 22783.0 126.0 377.0 5.0 2020-09-19 22893.0 110.0 378.0 1.0 264 rows × 4 columns usa = death[death['location'] == 'United States'] usa_death = usa[['date','total_cases','new_cases','total_deaths','new_deaths']] usa_death.iloc[:,0] = usa_death.iloc[:,0].astype('datetime64[ns]') usa_death.set_index(\"date\", inplace=True) usa_death C:\\Users\\masun\\anaconda3\\lib\\site-packages\\pandas\\core\\indexing.py:965: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy self.obj[item] = s total_cases new_cases total_deaths new_deaths date 2019-12-31 0.0 0.0 0.0 0.0 2020-01-01 0.0 0.0 0.0 0.0 2020-01-02 0.0 0.0 0.0 0.0 2020-01-03 0.0 0.0 0.0 0.0 2020-01-04 0.0 0.0 0.0 0.0 ... ... ... ... ... 2020-09-15 6554820.0 34841.0 194530.0 451.0 2020-09-16 6606293.0 51473.0 195937.0 1407.0 2020-09-17 6630891.0 24598.0 196802.0 865.0 2020-09-18 6674458.0 43567.0 197633.0 831.0 2020-09-19 6724667.0 50209.0 198589.0 956.0 264 rows × 4 columns chi = death[death['location'] == 'China'] chi_death = chi[['date','total_cases','new_cases','total_deaths','new_deaths']] chi_death.iloc[:,0] = chi_death.iloc[:,0].astype('datetime64[ns]') chi_death.set_index(\"date\", inplace=True) chi_death C:\\Users\\masun\\anaconda3\\lib\\site-packages\\pandas\\core\\indexing.py:965: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy self.obj[item] = s total_cases new_cases total_deaths new_deaths date 2019-12-31 27.0 27.0 0.0 0.0 2020-01-01 27.0 0.0 0.0 0.0 2020-01-02 27.0 0.0 0.0 0.0 2020-01-03 44.0 17.0 0.0 0.0 2020-01-04 44.0 0.0 0.0 0.0 ... ... ... ... ... 2020-09-15 90219.0 22.0 4735.0 1.0 2020-09-16 90243.0 24.0 4736.0 1.0 2020-09-17 90250.0 7.0 4736.0 0.0 2020-09-18 90294.0 44.0 4736.0 0.0 2020-09-19 90308.0 14.0 4737.0 1.0 264 rows × 4 columns jap = death[death['location'] == 'Japan'] jap_death = jap[['date','total_cases','new_cases','total_deaths','new_deaths']] jap_death.iloc[:,0] = jap_death.iloc[:,0].astype('datetime64[ns]') jap_death.set_index(\"date\", inplace=True) jap_death C:\\Users\\masun\\anaconda3\\lib\\site-packages\\pandas\\core\\indexing.py:965: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy self.obj[item] = s total_cases new_cases total_deaths new_deaths date 2019-12-31 0.0 0.0 0.0 0.0 2020-01-01 0.0 0.0 0.0 0.0 2020-01-02 0.0 0.0 0.0 0.0 2020-01-03 0.0 0.0 0.0 0.0 2020-01-04 0.0 0.0 0.0 0.0 ... ... ... ... ... 2020-09-15 75958.0 301.0 1451.0 9.0 2020-09-16 76448.0 490.0 1461.0 10.0 2020-09-17 77009.0 561.0 1473.0 12.0 2020-09-18 77494.0 485.0 1482.0 9.0 2020-09-19 78073.0 579.0 1495.0 13.0 264 rows × 4 columns df_u = fdr.DataReader('DJI', '2001-03-01') # 다우지수 df_u['Close'].plot() &lt;matplotlib.axes._subplots.AxesSubplot at 0x1ce9c6c4688&gt; df_k = fdr.DataReader('KS11', '2001-01-01') # 코스피 지수 df_k['Close'].plot() &lt;matplotlib.axes._subplots.AxesSubplot at 0x1ce9c9f2608&gt; 나스닥 - 코로나사망자 관계 # 관련 계수 start_date = '2020-01-01' fig, ax0 = plt.subplots(figsize=(8,4)) ax1 = ax0.twinx() ax0.set_title(\"nasdaq - corona\") ax0.plot(df_u['Close'][start_date:], 'r-') ax0.set_ylabel(\"종가\") ax0.grid(False) ax1.plot(usa_death['new_deaths'][start_date:], 'g:', label=\"사망자수\") ax1.set_ylabel(\"사망자\") ax1.grid(False) ax0.set_xlabel(\"시간\") plt.show() fig, ax0 = plt.subplots(figsize=(8,4)) ax1 = ax0.twinx() ax0.set_title(\"kospi - corona\") ax0.plot(df_u['Close'][start_date:], 'r-') ax0.set_ylabel(\"종가\") ax0.grid(False) ax1.plot(kor_death['new_deaths'][start_date:], 'b:', label=\"사망자수\") ax1.set_ylabel(\"사망자\") ax1.grid(False) ax0.set_xlabel(\"시간\") plt.show() 각국 코로나 발생시점 비교를 위한 국가별 코로나 누계 (log_scale) start_date = '2020-01-15' plt.figure(figsize=(13,5)) plt.title(\"국가별 코로나 누계 (log_scale)\") plt.plot(np.log(chi_death[\"total_cases\"]+1), label = \"CHI\") plt.plot(np.log(kor_death[\"total_cases\"]+1), label = \"KOR\") plt.plot(np.log(usa_death[\"total_cases\"]+1), label = \"USA\") plt.plot(np.log(jap_death[\"total_cases\"]+1), label = \"JAP\") plt.legend() plt.show()",
    "tags": "stock",
    "url": "/stock/2020/09/19/corona_200919.html"
  },{
    "title": "stock price analysis using RIM",
    "text": "RIM 기법 분석 RIM 기법을 활용한 기업 주가분석 1) kosip100 기업분석 2) 코스피 전종목 분석 (992개) 주가데이터 : FinanceDataReader 재무제표 : fnguide 크롤링 import pandas as pd import FinanceDataReader as fdr import matplotlib.pyplot as plt from matplotlib import font_manager, rc import matplotlib as mpl mpl.rc('font', family='Gulim') # 한글폰트 선택 %matplotlib inline RIM 계수 입력 ke = 7.96 # 할인율 : 신용평가의 BBB- 5년 등급에 해당하 요구수익률 w = 1 # 지속계수 w1 = 0.9 # 지속계수 할인율 10프로 w2 = 0.8 # 지속계수 할인율 20프로 day = 'Annual_2019/12' year = '2018' # 현주가 표시시점 종목 불러오기 # 1) 코스피100 종목 불러오기 company_list = pd.read_excel('kospi100_list.xls', dtype=str) company = company_list['Symbol'] # 2) 코스피 전종목 불러오기 \"\"\" KOSPI_list = fdr.StockListing('KOSPI') company = KOSPI_list.head(10).dropna()['Symbol'] company \"\"\" \"\\nKOSPI_list = fdr.StockListing('KOSPI')\\ncompany = KOSPI_list.head(10).dropna()['Symbol']\\ncompany\\n\" 재무제표 불러오기 def Df(company): try: url_tmpl = 'http://comp.fnguide.com/SVO2/ASP/SVD_Main.asp?pGB=1&amp;gicode=A%s&amp;cID=&amp;MenuYn=Y&amp;ReportGB=D&amp;NewMenuID=Y&amp;stkGb=701' # fnguide url = url_tmpl % (company) tables = pd.read_html(url, encoding='utf-8') ## 1. 재무제표 df1=tables[10] col = [] for a, b in df1.columns: c = a + '_' +b col.append(c) col[0] = '분류' df1.columns = col df1.set_index('분류', inplace =True) df1 ## 2. 발행주식수 (일반주 + 우선주) 계산 df2 = tables[0] df2.set_index(0, inplace =True) num = df2.loc['발행주식수(보통주/ 우선주)', 1] num_temp = num.split('/ ') num1 = int(num_temp[0].replace(',', '')) num2 = int(num_temp[1].replace(',', '')) enroll_num = num1 + num2 enroll_num ## 3. 자기주식 확인 df3 = tables[4] df3_temp = df3.set_index('주주구분') df3_temp.fillna(0,inplace=True) my_stock = int(df3_temp.iloc[4, 2]) my_stock num_stock = enroll_num - my_stock except: pass return df1, num_stock RIM 계산 def Rim(company, day): try: # 자기자본 및 ROE 계산 asset = df1.loc['지배주주지분', day] roe = df1.loc['ROE', day] # 적정주가 계산 v = asset + (asset*(roe/100 - ke/100) * w) / (1 + ke/100 -w) fair_price = v*100000000/num_stock if roe &gt;= ke: v1 = asset + (asset*(roe/100 - ke/100) * w1) / (1 + ke/100 -w1) v2 = asset + (asset*(roe/100 - ke/100) * w2) / (1 + ke/100 -w2) else: v1 = 0 v2 = 0 fair_price1 = v1*100000000/num_stock fair_price2 = v2*100000000/num_stock rows.append({'회사코드' : company, '회사이름' : company_list[company_list['Symbol'] == company].iloc[0,-1], '자기자본' : asset, #억원 'ROE' : roe, '기업가치' : v, '발행주식수' : num_stock, '적정주가' : int(fair_price), '할인주가_10' : int(fair_price1), '할인주가_20' : int(fair_price2)}) except: pass return rows rim = pd.DataFrame() rows = [] for i in company: df1, num_stock = Df(i) Rim(i, day) rim1 = rim.append(rows) rim1 회사코드 회사이름 자기자본 ROE 기업가치 발행주식수 적정주가 할인주가_10 할인주가_20 0 005930 삼성전자 2549155.0 8.69 2.782934e+06 6792669250 40969 38900 38311 1 000660 SK하이닉스 479284.0 4.25 2.558991e+05 728002359 35150 0 0 2 035420 NAVER 58052.0 10.56 7.701371e+04 164263384 46884 39945 37969 3 051910 LG화학 170050.0 1.84 3.930804e+04 78281141 50213 0 0 4 068270 셀트리온 27942.0 11.19 3.928027e+04 134993738 29097 24049 22611 ... ... ... ... ... ... ... ... ... ... 94 003410 쌍용양회 18025.0 7.01 1.587378e+04 505403280 3140 0 0 95 047050 포스코인터내셔널 30477.0 7.06 2.703111e+04 123375149 21909 0 0 96 051600 한전KPS 10634.0 14.98 2.001223e+04 45000000 44471 31944 28377 97 047040 대우건설 24587.0 8.80 2.718161e+04 415622637 6539 6164 6057 98 088350 한화생명 126859.0 0.87 1.386524e+04 868529987 1596 0 0 99 rows × 9 columns 현재주가 불러오기 rim2 = rim1.set_index('회사코드') for i in rim2.index: tmp_price = fdr.DataReader(i).iloc[-1, 3] rim2.loc[i ,'현주가'] = tmp_price rim2['주가차_비'] = (rim2['적정주가'] - rim2['현주가'])/rim2['현주가'] rim2.sort_values(by='주가차_비', ascending = False, inplace = True) rim2[rim2['주가차_비'] &gt;=0] 회사이름 자기자본 ROE 기업가치 발행주식수 적정주가 할인주가_10 할인주가_20 현주가 주가차_비 회사코드 138930 BNK금융지주 82837.0 7.07 73575.074121 325935246 22573 0 0 5140.0 3.391634 086790 하나금융지주 281245.0 8.77 309864.152010 300242060 103204 97474 95843 28150.0 2.666217 004170 신세계 39265.0 14.24 70242.914573 9845181 713475 524334 470487 215500.0 2.310789 055550 신한지주 391779.0 9.09 447395.868090 494878835 90405 83649 81726 28350.0 2.188889 024110 기업은행 226618.0 7.36 209536.241206 836636680 25045 0 0 8000.0 2.130625 006360 GS건설 39747.0 11.79 58871.498744 80097804 73499 59147 55061 25100.0 1.928247 105560 KB금융 385339.0 8.92 431812.045226 415807914 103848 97130 95217 37750.0 1.750940 000210 대림산업 59373.0 11.74 87567.716080 38600000 226859 182952 170451 83500.0 1.716874 071050 한국금융지주 50037.0 18.14 114029.042714 61584238 185159 122697 104915 78100.0 1.370794 078930 GS 88778.0 6.26 69817.874372 94700204 73725 0 0 32800.0 1.247713 047040 대우건설 24587.0 8.80 27181.608040 415622637 6539 6164 6057 2925.0 1.235556 005940 NH투자증권 53851.0 9.12 61698.633166 300279855 20547 18976 18528 9320.0 1.204614 028050 삼성엔지니어링 13228.0 24.61 40897.120603 196000000 20865 12380 9964 11150.0 0.871300 069960 현대백화점 42420.0 4.64 24727.236181 23402436 105660 0 0 56800.0 0.860211 016360 삼성증권 49493.0 8.15 50674.365578 89300000 56746 55950 55724 31200.0 0.818782 001450 현대해상 45104.0 6.23 35301.246231 89399989 39486 0 0 22850.0 0.728053 081660 휠라홀딩스 12497.0 23.81 37381.101759 60752222 61530 36908 29899 37000.0 0.662973 051600 한전KPS 10634.0 14.98 20012.226131 45000000 44471 31944 28377 28000.0 0.588250 047050 포스코인터내셔널 30477.0 7.06 27031.108040 123375149 21909 0 0 13850.0 0.581877 005830 DB손해보험 59490.0 6.84 51119.547739 70799985 72202 0 0 45700.0 0.579912 000720 현대건설 66626.0 6.30 52731.633166 111454621 47312 0 0 32100.0 0.473894 005490 POSCO 444719.0 4.18 233533.344221 87186826 267853 0 0 192000.0 0.395068 029780 삼성카드 68964.0 5.04 43665.648241 115858884 37688 0 0 28900.0 0.304083 012330 현대모비스 323300.0 7.28 295681.407035 95058667 311051 0 0 240000.0 0.296046 030200 KT 136668.0 4.61 79150.688442 261111802 30312 0 0 23400.0 0.295385 241560 두산밥캣 39791.0 7.05 35242.028894 100249166 35154 0 0 27250.0 0.290055 011170 롯데케미칼 132044.0 5.51 91402.316583 34275419 266670 0 0 209500.0 0.272888 161390 한국타이어앤테크놀로 71568.0 6.03 54215.457286 123875068 43766 0 0 34400.0 0.272267 000270 기아차 289781.0 6.50 236630.213568 405363346 58374 0 0 47800.0 0.221213 086280 현대글로비스 46703.0 11.25 66006.124372 37500000 176016 145074 136264 147500.0 0.193329 033780 KT&amp;G 86506.0 12.39 134649.414573 137292488 98074 76996 70995 83100.0 0.180193 006800 미래에셋대우 91278.0 7.56 86691.165829 799392137 10844 0 0 9200.0 0.178696 001040 CJ 45096.0 6.24 35351.638191 35663726 99124 0 0 85800.0 0.155291 011780 금호석유 26286.0 11.84 39098.773869 33491159 116743 93746 87199 102000.0 0.144539 010130 고려아연 67154.0 9.76 82339.577889 18869994 436351 387977 374205 392000.0 0.113140 032640 LG유플러스 70809.0 6.30 56042.298995 436611361 12835 0 0 11700.0 0.097009 032830 삼성생명 356670.0 3.03 135767.600503 199999990 67883 0 0 62900.0 0.079221 088350 한화생명 126859.0 0.87 13865.242462 868529987 1596 0 0 1565.0 0.019808 003550 LG 188270.0 5.87 138837.298995 175871808 78942 0 0 78900.0 0.000532 price = pd.DataFrame() for n, i in enumerate(rim2.index): tmp_stock_price = fdr.DataReader(i, year) price[i] = tmp_stock_price['Close'] 특정조건 그래프 그리기 rim3 = rim2[(rim2['주가차_비'] &gt;=0)] rim3 회사이름 자기자본 ROE 기업가치 발행주식수 적정주가 할인주가_10 할인주가_20 현주가 주가차_비 회사코드 138930 BNK금융지주 82837.0 7.07 73575.074121 325935246 22573 0 0 5140.0 3.391634 086790 하나금융지주 281245.0 8.77 309864.152010 300242060 103204 97474 95843 28150.0 2.666217 004170 신세계 39265.0 14.24 70242.914573 9845181 713475 524334 470487 215500.0 2.310789 055550 신한지주 391779.0 9.09 447395.868090 494878835 90405 83649 81726 28350.0 2.188889 024110 기업은행 226618.0 7.36 209536.241206 836636680 25045 0 0 8000.0 2.130625 006360 GS건설 39747.0 11.79 58871.498744 80097804 73499 59147 55061 25100.0 1.928247 105560 KB금융 385339.0 8.92 431812.045226 415807914 103848 97130 95217 37750.0 1.750940 000210 대림산업 59373.0 11.74 87567.716080 38600000 226859 182952 170451 83500.0 1.716874 071050 한국금융지주 50037.0 18.14 114029.042714 61584238 185159 122697 104915 78100.0 1.370794 078930 GS 88778.0 6.26 69817.874372 94700204 73725 0 0 32800.0 1.247713 047040 대우건설 24587.0 8.80 27181.608040 415622637 6539 6164 6057 2925.0 1.235556 005940 NH투자증권 53851.0 9.12 61698.633166 300279855 20547 18976 18528 9320.0 1.204614 028050 삼성엔지니어링 13228.0 24.61 40897.120603 196000000 20865 12380 9964 11150.0 0.871300 069960 현대백화점 42420.0 4.64 24727.236181 23402436 105660 0 0 56800.0 0.860211 016360 삼성증권 49493.0 8.15 50674.365578 89300000 56746 55950 55724 31200.0 0.818782 001450 현대해상 45104.0 6.23 35301.246231 89399989 39486 0 0 22850.0 0.728053 081660 휠라홀딩스 12497.0 23.81 37381.101759 60752222 61530 36908 29899 37000.0 0.662973 051600 한전KPS 10634.0 14.98 20012.226131 45000000 44471 31944 28377 28000.0 0.588250 047050 포스코인터내셔널 30477.0 7.06 27031.108040 123375149 21909 0 0 13850.0 0.581877 005830 DB손해보험 59490.0 6.84 51119.547739 70799985 72202 0 0 45700.0 0.579912 000720 현대건설 66626.0 6.30 52731.633166 111454621 47312 0 0 32100.0 0.473894 005490 POSCO 444719.0 4.18 233533.344221 87186826 267853 0 0 192000.0 0.395068 029780 삼성카드 68964.0 5.04 43665.648241 115858884 37688 0 0 28900.0 0.304083 012330 현대모비스 323300.0 7.28 295681.407035 95058667 311051 0 0 240000.0 0.296046 030200 KT 136668.0 4.61 79150.688442 261111802 30312 0 0 23400.0 0.295385 241560 두산밥캣 39791.0 7.05 35242.028894 100249166 35154 0 0 27250.0 0.290055 011170 롯데케미칼 132044.0 5.51 91402.316583 34275419 266670 0 0 209500.0 0.272888 161390 한국타이어앤테크놀로 71568.0 6.03 54215.457286 123875068 43766 0 0 34400.0 0.272267 000270 기아차 289781.0 6.50 236630.213568 405363346 58374 0 0 47800.0 0.221213 086280 현대글로비스 46703.0 11.25 66006.124372 37500000 176016 145074 136264 147500.0 0.193329 033780 KT&amp;G 86506.0 12.39 134649.414573 137292488 98074 76996 70995 83100.0 0.180193 006800 미래에셋대우 91278.0 7.56 86691.165829 799392137 10844 0 0 9200.0 0.178696 001040 CJ 45096.0 6.24 35351.638191 35663726 99124 0 0 85800.0 0.155291 011780 금호석유 26286.0 11.84 39098.773869 33491159 116743 93746 87199 102000.0 0.144539 010130 고려아연 67154.0 9.76 82339.577889 18869994 436351 387977 374205 392000.0 0.113140 032640 LG유플러스 70809.0 6.30 56042.298995 436611361 12835 0 0 11700.0 0.097009 032830 삼성생명 356670.0 3.03 135767.600503 199999990 67883 0 0 62900.0 0.079221 088350 한화생명 126859.0 0.87 13865.242462 868529987 1596 0 0 1565.0 0.019808 003550 LG 188270.0 5.87 138837.298995 175871808 78942 0 0 78900.0 0.000532 num = rim3.shape[0] fig = plt.figure(figsize=(15, 2.5 * num)) for n, i in enumerate(rim3.index): plt.subplot(round(num/2)+1, 2, n+1) plt.plot(price[i]) plt.axhline(y=rim3.loc[i, '적정주가'], color='b', ls=':', label='적정주가') if rim3.loc[i, '할인주가_10'] != 0 : plt.axhline(y=rim3.loc[i, '할인주가_10'], color='#8c8aff', ls=':', label='할인주가_10') plt.axhline(y=rim3.loc[i, '할인주가_20'], color='#d2d1ff', ls=':', label='할인주가_20') plt.legend() plt.title(company_list[company_list['Symbol'] == i].iloc[0,-1])",
    "tags": "stock",
    "url": "/stock/2020/09/19/Rim_200906.html"
  },{
    "title": "post-sample5",
    "text": "post-sample Hello! This is code print 'hello world'",
    "tags": "python",
    "url": "/python/2020/01/05/post5.html"
  },{
    "title": "post-sample4",
    "text": "post-sample Hello! This is code print 'hello world'",
    "tags": "python",
    "url": "/python/2020/01/04/post4.html"
  },{
    "title": "Welcome to Jekyll!",
    "text": "You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated. Jekyll requires blog post files to be named according to the following format: YEAR-MONTH-DAY-title.MARKUP Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and MARKUP is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works. Jekyll also offers powerful support for code snippets: def print_hi(name) puts \"Hi, #{name}\" end print_hi('Tom') #=&gt; prints 'Hi, Tom' to STDOUT. Check out the Jekyll docs for more info on how to get the most out of Jekyll. File all bugs/feature requests at Jekyll’s GitHub repo. If you have questions, you can ask them on Jekyll Talk.",
    "tags": "jekyll update",
    "url": "/jekyll/update/2020/01/02/welcome-to-jekyll.html"
  },{
    "title": "post-sample",
    "text": "post-sample Hello! This is code print 'hello world'",
    "tags": "sample",
    "url": "/sample/2020/01/02/post2.html"
  },{
    "title": "post-sample2",
    "text": "post-sample Hello! This is code print 'hello world'",
    "tags": "sample",
    "url": "/sample/2020/01/02/post1.html"
  }]};
