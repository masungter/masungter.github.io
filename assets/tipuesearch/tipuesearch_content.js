var tipuesearch = {"pages": [{
    "title": "Real Estate using big data",
    "text": "부동산 투자를 위한 학군 분석 ### 특목고 진학률 분석으로 학군객관적 분석 지도데이터 : folium 학교 위치 : 위도/경도 데이터 추출 학교 알리미 https://www.schoolinfo.go.kr/Main.do 학교알리미-공시정보-공개용데이터-학교기본정보 졸업생 진료현황 : 과학고 + 외고 + 자사고 비율 학교알리미 import pandas as pd import folium seoul_map = folium.Map(location=[37.5614378, 126.9751701],zoom_start = 14) folium.Marker([37.5614378, 126.9751701],popup='서울시청').add_to(seoul_map) seoul_map school_path = r'schoolinfo.xlsx' school_raw = pd.read_excel(school_path) school_data = school_raw[['정보공시 \\n 학교코드', '학교명', '위도', '경도']] school_data.columns = ['학교코드', '학교명', '위도', '경도'] school_df = school_data.drop_duplicates() school_df 학교코드 학교명 위도 경도 0 S000003511 서울교육대학교부설초등학교 37.490739 127.015424 1 S000003563 서울대학교사범대학부설초등학교 37.577017 127.003091 2 S010000738 서울개일초등학교 37.486214 127.057742 3 S010000741 서울구룡초등학교 37.481193 127.051755 4 S010000742 서울논현초등학교 37.500000 127.000000 ... ... ... ... ... 12191 S170000512 제주영지학교 33.488117 126.542748 12192 S170000513 제주영송학교 33.450047 126.434217 12193 S170000790 서귀포온성학교 33.291338 126.593310 12194 S170000155 제주제일고등학교부설방송통신고등학교 33.480030 126.479518 12195 S170000870 제주제일중학교부설방송통신중학교 33.495201 126.538850 12193 rows × 4 columns # [예제 5.5] graduate_preprocrssing 함수 가지고 와 데이터프레임 만들기 def graduate_preprocrssing(path): raw_graduate = pd.read_excel(path, sheet_name='2018_졸업생의 진로 현황(중)') select_col = raw_graduate[['지역', '학교명','정보공시 \\n 학교코드', '졸업자.2', '(특수목적고)과학고 진학자.2','(특수목적고)외고ㆍ국제고 진학자.2','(자율고)자율형사립고 진학자.2']] select_col.columns = ['지역', '학교명', '학교코드', '졸업자', '과고', '외고', '자사고'] graduate_data = select_col.drop(0) graduate_data['과고'] = pd.to_numeric(graduate_data['과고']) graduate_data['외고'] = pd.to_numeric(graduate_data['외고']) graduate_data['자사고'] = pd.to_numeric(graduate_data['자사고']) graduate_data['졸업자'] = pd.to_numeric(graduate_data['졸업자']) graduate_data['총합'] = graduate_data['과고'] + graduate_data['외고'] + graduate_data['자사고'] def get_sido(x): temp = x.split(' ')[0] if len(temp) != 4: return temp[:2] else: return temp[0] + temp[2] graduate_data['시도'] = graduate_data['지역'].dropna().apply(get_sido) graduate_data['구군'] = graduate_data['지역'].dropna().apply(lambda x: x.split(' ')[1]) graduate_data.at[588,'시도'] = '부산' graduate_data.at[588,'구군'] = '기장군' graduate_data.at[3011,'시도'] = '경북' graduate_data.at[3011,'구군'] = '예천군' return graduate_data graduate_path = r'oldman.xlsx' gradu_df = graduate_preprocrssing(graduate_path) gradu_df 지역 학교명 학교코드 졸업자 과고 외고 자사고 총합 시도 구군 1 서울특별시 성북구 서울대학교사범대학부설중학교 S000003514 234.0 4.0 5.0 60.0 69.0 서울 성북구 2 서울특별시 종로구 서울대학교사범대학부설여자중학교 S000003562 172.0 0.0 8.0 9.0 17.0 서울 종로구 3 서울특별시 강남구 개원중학교 S010000698 214.0 2.0 9.0 1.0 12.0 서울 강남구 4 서울특별시 서초구 경원중학교 S010000700 310.0 5.0 4.0 128.0 137.0 서울 서초구 5 서울특별시 강남구 구룡중학교 S010000701 256.0 3.0 4.0 31.0 38.0 서울 강남구 ... ... ... ... ... ... ... ... ... ... ... 3454 제주특별자치도 제주시 탐라중학교 S170000844 298.0 1.0 1.0 2.0 4.0 제주 제주시 3455 제주특별자치도 제주시 제주영지학교 S170000512 12.0 0.0 0.0 0.0 0.0 제주 제주시 3456 제주특별자치도 제주시 제주영송학교 S170000513 21.0 0.0 0.0 0.0 0.0 제주 제주시 3457 제주특별자치도 서귀포시 서귀포온성학교 S170000790 9.0 0.0 0.0 0.0 0.0 제주 서귀포시 3458 제주특별자치도 제주시 제주제일중학교부설방송통신중학교 S170000870 NaN NaN NaN NaN NaN 제주 제주시 3458 rows × 10 columns total_school_df = pd.merge(gradu_df, school_df, how='inner', right_on='학교코드', left_on='학교코드') total_school_df 지역 학교명_x 학교코드 졸업자 과고 외고 자사고 총합 시도 구군 학교명_y 위도 경도 0 서울특별시 성북구 서울대학교사범대학부설중학교 S000003514 234.0 4.0 5.0 60.0 69.0 서울 성북구 서울대학교사범대학부설중학교 37.596201 127.039164 1 서울특별시 종로구 서울대학교사범대학부설여자중학교 S000003562 172.0 0.0 8.0 9.0 17.0 서울 종로구 서울대학교사범대학부설여자중학교 37.577928 127.003899 2 서울특별시 강남구 개원중학교 S010000698 214.0 2.0 9.0 1.0 12.0 서울 강남구 개원중학교 37.491641 127.071415 3 서울특별시 서초구 경원중학교 S010000700 310.0 5.0 4.0 128.0 137.0 서울 서초구 경원중학교 37.510997 127.008879 4 서울특별시 강남구 구룡중학교 S010000701 256.0 3.0 4.0 31.0 38.0 서울 강남구 구룡중학교 37.486153 127.056123 ... ... ... ... ... ... ... ... ... ... ... ... ... ... 3438 제주특별자치도 제주시 탐라중학교 S170000844 298.0 1.0 1.0 2.0 4.0 제주 제주시 탐라중학교 33.491686 126.545093 3439 제주특별자치도 제주시 제주영지학교 S170000512 12.0 0.0 0.0 0.0 0.0 제주 제주시 제주영지학교 33.488117 126.542748 3440 제주특별자치도 제주시 제주영송학교 S170000513 21.0 0.0 0.0 0.0 0.0 제주 제주시 제주영송학교 33.450047 126.434217 3441 제주특별자치도 서귀포시 서귀포온성학교 S170000790 9.0 0.0 0.0 0.0 0.0 제주 서귀포시 서귀포온성학교 33.291338 126.593310 3442 제주특별자치도 제주시 제주제일중학교부설방송통신중학교 S170000870 NaN NaN NaN NaN NaN 제주 제주시 제주제일중학교부설방송통신중학교 33.495201 126.538850 3443 rows × 13 columns 데이터를 바탕으로 지도에 표시 서울 # 관련 수치 region = '서울' ratio = 20 region_school = total_school_df[total_school_df['시도'] == region] region_school['비율'] = region_school['총합'] /region_school['졸업자'] * 100 good_school = region_school[region_school['비율'] &gt;= ratio] bad_school = region_school[region_school['비율'] &lt; ratio] C:\\Users\\masun\\anaconda3\\lib\\site-packages\\ipykernel_launcher.py:2: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy # [예제 5.7] 서울 지역에서 특목고 보낸 중학교 모두 표시하기 seoul_map = folium.Map(location=[37.5614378,126.9751701], zoom_start=11) for n in region_school.index: folium.Marker([ region_school['위도'][n], region_school['경도'][n] ], popup=region_school['학교명_x'][n]).add_to(seoul_map) seoul_map # [예제 5.8] 서울의 특목고 진학률이 높은 학교와 낮은 학교 비교 map_1 = folium.Map(location=[37.5614378,126.9751701], zoom_start=11) for n in good_school.index: folium.CircleMarker([ good_school['위도'][n], good_school['경도'][n] ], color='crimson',fill_color='crimson', radius=7).add_to(map_1) for n in bad_school.index: folium.CircleMarker([ bad_school['위도'][n], bad_school['경도'][n] ], color='#3186cc',fill_color='#3186cc', radius=7).add_to(map_1) map_1 경기도 # 관련 수치 region = '경기' ratio = 10 region_school = total_school_df[total_school_df['시도'] == region] region_school['비율'] = region_school['총합'] /region_school['졸업자'] * 100 good_school = region_school[region_school['비율'] &gt;= ratio] bad_school = region_school[region_school['비율'] &lt; ratio] C:\\Users\\masun\\anaconda3\\lib\\site-packages\\ipykernel_launcher.py:2: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy # [예제 5.8] 서울의 특목고 진학률이 높은 학교와 낮은 학교 비교 map_1 = folium.Map(location=[37.4,126.9751701], zoom_start=10.5) for n in good_school.index: folium.CircleMarker([ good_school['위도'][n], good_school['경도'][n] ], color='crimson',fill_color='crimson', radius=7).add_to(map_1) for n in bad_school.index: folium.CircleMarker([ bad_school['위도'][n], bad_school['경도'][n] ], color='#3186cc',fill_color='#3186cc', radius=7).add_to(map_1) map_1",
    "tags": "real_estate",
    "url": "/real_estate/2020/09/23/midschool.html"
  },{
    "title": "stock using Public API",
    "text": "수출입 통계를 주가 분석 Dart API 및 공공 API 활용 자동차 수출량을 이용한 현대차 주가 분석 현대차 매출 : DART API 활용 국내 자동차 수출량 : 공공 API 활용 주가 : FinanceDataReader 라이브러리 활용 # -*- coding: utf-8 -*- import requests from bs4 import BeautifulSoup import pandas as pd import matplotlib.pyplot as plt from matplotlib import font_manager, rc %matplotlib inline font_name = font_manager.FontProperties(fname=\"c:/Windows/Fonts/malgun.ttf\").get_name() rc('font', family=font_name) 1) 공공 API 활용 company = '005380' #현대자동차 api_key=\"###########\" searchBgnDe = '201901' searchEndDe = '202001' searchItemCd = '87032' def a(searchBgnDe, searchEndDe,searchItemCd): public_API_url = 'http://openapi.customs.go.kr/openapi/service/newTradestatistics/' operation_url = 'getitemtradeList' url = public_API_url + operation_url + '?' + 'serviceKey=' + api_key + '&amp;searchBgnDe=' + searchBgnDe \\ +'&amp;searchEndDe=' + searchEndDe + '&amp;searchItemCd=' + searchItemCd + '&amp;' res = requests.get(url) soup = BeautifulSoup(res.text,'lxml-xml') it = soup.select('item') for node in it: balPayments = node.find('balPayments').text # 무역수지 expDlr = node.find('expDlr').text #수출금액 hsCode = node.find('hsCode').text #HS코드 impDlr = node.find('impDlr').text #수입금액 statKor = node.find('statKor').text #품목명 year = node.find('year').text #년도 rows_1.append({'year':year, 'statKor':statKor, 'hsCode':hsCode, 'expDlr':expDlr, 'impDlr':impDlr, 'balPayments':balPayments}) return rows_1 데이터는 1년단위만 조회되기때문에 for / zip문으로 나눠서 검색한다 ragne_searchBgnDe = ['201501','201601','201701','201801', '201901','202001'] range_searchEndDe = ['201601','201701','201801','201901', '202001','202009'] rows_1 =[] for searchBgnDe, searchEndDe in zip(ragne_searchBgnDe, range_searchEndDe): a(searchBgnDe, searchEndDe, searchItemCd) df_1 = pd.DataFrame(rows_1) df_1 = df_1[df_1.hsCode != '-'].astype({'expDlr':int, 'impDlr':int, 'balPayments':int}) df_1 year statKor hsCode expDlr impDlr balPayments 0 2015.01 신차 8703217000 61809228 182497 61626731 1 2015.01 중고차 8703218000 5355328 173670 5181658 2 2015.01 신차 8703227000 587532292 2922784 584609508 3 2015.01 중고차 8703228000 11313288 25165 11288123 4 2015.01 신차 8703231010 1264670766 68908251 1195762515 ... ... ... ... ... ... ... 876 2020.08 중고차 8703239020 7715610 1340566 6375044 877 2020.08 신차 8703241010 322423781 164538857 157884924 878 2020.08 중고차 8703241020 2429211 2284336 144875 879 2020.08 신차 8703249010 9784592 25698521 -15913929 880 2020.08 중고차 8703249020 839941 825064 14877 876 rows × 6 columns 자동차는 수출입 코드가 생각보다 복잡하게 분류되어 조금더 조사 해볼 필요가 있다. 앞으로는 수출입코드가 명확한 제품만 검색하는것을 추천한다. 8703217000 # 실린더용량 1000cc 이하 신차 8703227000 # 실린더용량 1000cc 초과 1500cc 이하 신차 8703231010 # 실린더용량 1500cc 초과 3000cc 이하 신차 (1) 8703239010 # 실린더용량 1500cc 초과 3000cc 이하 신차 (2) 8703241010 # 실린더용량 3000cc 이하 신차 (1) 8703249010 # 실린더용량 3000cc 이하 신차 (2) graph_1 = df_1[df_1.statKor == '신차'].groupby('year').sum() / 100000000 * 1200 ## 환율 1200원 graph_1 = graph_1.reset_index().rename(columns={\"index\": \"year\"}) graph_1['year'] = graph_1['year'].astype('datetime64[ns]') graph_1 year expDlr impDlr balPayments 0 2015-01-01 36291.227304 3578.479920 32712.747384 1 2015-02-01 30662.912976 3036.092328 27626.820648 2 2015-03-01 40238.613240 3837.798108 36400.815132 3 2015-04-01 41669.766696 3701.494332 37968.272364 4 2015-05-01 35459.968632 3338.356740 32121.611892 ... ... ... ... ... 63 2020-04-01 18595.547388 8334.615060 10260.932328 64 2020-05-01 13422.880368 6475.502460 6947.377908 65 2020-06-01 19109.585076 3484.373256 15625.211820 66 2020-07-01 30189.819960 3898.841928 26290.978032 67 2020-08-01 22308.415944 6023.856564 16284.559380 68 rows × 4 columns graph_1.tail(20) year expDlr impDlr balPayments 48 2019-01-01 61412.848800 10276.930104 51135.918696 49 2019-02-01 24317.098752 3885.256140 20431.842612 50 2019-03-01 31213.341936 6843.082488 24370.259448 51 2019-04-01 32553.757848 6236.807724 26316.950124 52 2019-05-01 35211.662040 5037.568716 30174.093324 53 2019-06-01 33084.521532 4960.167168 28124.354364 54 2019-07-01 32261.494284 8173.738800 24087.755484 55 2019-08-01 24654.308088 8379.387072 16274.921016 56 2019-09-01 24842.036520 7037.552940 17804.483580 57 2019-10-01 32846.579736 8814.210684 24032.369052 58 2019-11-01 33219.159708 4599.838584 28619.321124 59 2019-12-01 32593.551084 9838.477752 22755.073332 60 2020-01-01 48401.686944 8684.916360 39716.770584 61 2020-02-01 20547.620424 5702.707896 14844.912528 62 2020-03-01 33369.711720 7049.699208 26320.012512 63 2020-04-01 18595.547388 8334.615060 10260.932328 64 2020-05-01 13422.880368 6475.502460 6947.377908 65 2020-06-01 19109.585076 3484.373256 15625.211820 66 2020-07-01 30189.819960 3898.841928 26290.978032 67 2020-08-01 22308.415944 6023.856564 16284.559380 2) FinanceDataReader 데이터를 이용하여 주가 데이터 로드 import FinanceDataReader as fdr hmc = fdr.DataReader(company, '2015-01-01') # 다우지수 hmc['Close'].plot() #ax0.plot(df_u['Close'][start_date:], 'r-') &lt;matplotlib.axes._subplots.AxesSubplot at 0x14fd5d80108&gt; 3) OpenDartReader를 이용해 매출액 불러오기 import numpy as np import OpenDartReader dart_api_key=\"######\" dart = OpenDartReader(dart_api_key) year = np.arange(2016, 2021) def dart_qt_revenue(year): # 분기보고서 매출 reprt_code = [11013, 11012, 11014] year_reprt_code = [11011] for a in year: sum_revenue = 0 for b in reprt_code: if a == 2020 and b== 11012: #### 2020년 3분기까지만 나오게하는 print('aaaaaaa') break fs = dart.finstate(company, a, b) fs_cfs = fs[fs['fs_div'].str.contains('CFS')] fs_revenue= fs_cfs[fs_cfs['account_nm'].str.contains('매출액')] revenue = fs_revenue['thstrm_amount'].iloc[0].replace(',', '').strip() # 값 불러오기 sum_revenue += int(revenue) df_revenue[fs_revenue['thstrm_dt'].iloc[0].strip()[13:].replace('.', '').strip()] = int(revenue)/100000000 if a == 2020 and b== 11012: #### 2020년 3분기까지만 나오게하는 print('bbbbbbb') break fs = dart.finstate(company, a, 11011) fs_cfs = fs[fs['fs_div'].str.contains('CFS')] fs_revenue= fs_cfs[fs_cfs['account_nm'].str.contains('매출액')] revenue = fs_revenue['thstrm_amount'].iloc[0].replace(',', '').strip() # 값 불러오기 revenue = int(revenue) - sum_revenue df_revenue[fs_revenue['thstrm_dt'].iloc[0].strip()[13:].replace('.', '').strip()] = revenue/100000000 return df_revenue df_revenue = {} dart_qt_revenue(year) df_21 = pd.DataFrame(df_revenue, index=[0]).T df_21 = df_21.reset_index() df_21.columns=['연도', '매출액'] df_21['연도'] = df_21['연도'].astype('datetime64[ns]') df_21 C:\\Users\\masun\\anaconda3\\lib\\site-packages\\OpenDartReader\\dart_finstate.py:28: FutureWarning: pandas.io.json.json_normalize is deprecated, use pandas.json_normalize instead return json_normalize(jo, 'list') aaaaaaa bbbbbbb 연도 매출액 0 2016-03-31 223506.24 1 2016-06-30 246767.26 2 2016-09-30 220836.70 3 2016-12-31 245380.04 4 2017-03-31 233659.59 5 2017-06-30 243080.02 6 2017-09-30 242012.73 7 2017-12-31 245008.45 8 2018-03-31 224365.61 9 2018-06-30 247118.02 10 2018-09-30 244337.35 11 2018-12-31 252305.11 12 2019-03-31 239870.79 13 2019-06-30 269663.53 14 2019-09-30 269688.53 15 2019-12-31 278241.37 16 2020-03-31 253194.48 plt.figure(figsize=(12, 7)) ax0, ax1 = plt.gca(), plt.gca().twinx() #fig, ax0 = plt.subplots() #ax1 = ax0.twinx() ax0.bar(graph_1['year'], graph_1['expDlr'], width=10, label=\"수출 금액\", color='dodgerblue') ax0.plot(df_21['연도'], df_21['매출액']/3, label=\"분기 매출/3\", color='red') ax0.set_ylabel(\"수출금액(억원)\") ax0.grid(False) ax1.plot(hmc['Close'][graph_1['year'].min():], label ='주식', color='black') ax1.set_ylabel(\"주가\") ax1.grid(False) ylim_max = hmc['Close'][graph_1['year'].min():graph_1['year'].max()].max() ax1.set_ylim([0, ylim_max*1.3]) ax0.legend() ax1.legend() plt.show() 그래프는 좀 이쁘게 꾸밀필요가 있다. 개념만 파악하자",
    "tags": "stock",
    "url": "/stock/2020/09/22/Pulbic_API_export.html"
  },{
    "title": "stock using DART API",
    "text": "OpenDartReader API를 이용한 DART조회 분기보고서 조회하여 매출 조회 import OpenDartReader import pandas as pd import numpy as np import warnings warnings.filterwarnings('ignore') api_key = \"##############\" dart = OpenDartReader(api_key) company = '005380' #현대차 코드 year = np.arange(2016, 2021) reprt_code = ['11013', '11012', '11014', '11011'] dart.finstate(company, '2020', reprt_code = '11012') rcept_no reprt_code bsns_year corp_code stock_code fs_div fs_nm sj_div sj_nm account_nm thstrm_nm thstrm_dt thstrm_amount frmtrm_nm frmtrm_dt frmtrm_amount ord thstrm_add_amount frmtrm_add_amount 0 20200814002203 11012 2020 00164742 005380 CFS 연결재무제표 BS 재무상태표 유동자산 제 53 기반기말 2020.06.30 현재 79,025,897,000,000 제 52 기말 2019.12.31 현재 76,082,873,000,000 1 NaN NaN 1 20200814002203 11012 2020 00164742 005380 CFS 연결재무제표 BS 재무상태표 비유동자산 제 53 기반기말 2020.06.30 현재 122,778,623,000,000 제 52 기말 2019.12.31 현재 118,429,347,000,000 3 NaN NaN 2 20200814002203 11012 2020 00164742 005380 CFS 연결재무제표 BS 재무상태표 자산총계 제 53 기반기말 2020.06.30 현재 201,804,520,000,000 제 52 기말 2019.12.31 현재 194,512,220,000,000 5 NaN NaN 3 20200814002203 11012 2020 00164742 005380 CFS 연결재무제표 BS 재무상태표 유동부채 제 53 기반기말 2020.06.30 현재 54,213,858,000,000 제 52 기말 2019.12.31 현재 53,314,096,000,000 7 NaN NaN 4 20200814002203 11012 2020 00164742 005380 CFS 연결재무제표 BS 재무상태표 비유동부채 제 53 기반기말 2020.06.30 현재 71,542,527,000,000 제 52 기말 2019.12.31 현재 64,832,370,000,000 9 NaN NaN 5 20200814002203 11012 2020 00164742 005380 CFS 연결재무제표 BS 재무상태표 부채총계 제 53 기반기말 2020.06.30 현재 125,756,385,000,000 제 52 기말 2019.12.31 현재 118,146,466,000,000 11 NaN NaN 6 20200814002203 11012 2020 00164742 005380 CFS 연결재무제표 BS 재무상태표 자본금 제 53 기반기말 2020.06.30 현재 1,488,993,000,000 제 52 기말 2019.12.31 현재 1,488,993,000,000 13 NaN NaN 7 20200814002203 11012 2020 00164742 005380 CFS 연결재무제표 BS 재무상태표 이익잉여금 제 53 기반기말 2020.06.30 현재 68,114,066,000,000 제 52 기말 2019.12.31 현재 68,249,633,000,000 17 NaN NaN 8 20200814002203 11012 2020 00164742 005380 CFS 연결재무제표 BS 재무상태표 자본총계 제 53 기반기말 2020.06.30 현재 76,048,135,000,000 제 52 기말 2019.12.31 현재 76,365,754,000,000 21 NaN NaN 9 20200814002203 11012 2020 00164742 005380 CFS 연결재무제표 IS 손익계산서 매출액 제 53 기반기 2020.01.01 ~ 2020.06.30 21,858,991,000,000 제 52 기반기 2019.01.01 ~ 2019.06.30 26,966,353,000,000 23 47,178,439,000,000 50,953,432,000,000 10 20200814002203 11012 2020 00164742 005380 CFS 연결재무제표 IS 손익계산서 법인세차감전 순이익 제 53 기반기 2020.01.01 ~ 2020.06.30 596,266,000,000 제 52 기반기 2019.01.01 ~ 2019.06.30 1,385,986,000,000 27 1,320,534,000,000 2,602,787,000,000 11 20200814002203 11012 2020 00164742 005380 OFS 재무제표 BS 재무상태표 유동자산 제 53 기반기말 2020.06.30 현재 21,464,025,000,000 제 52 기말 2019.12.31 현재 22,346,792,000,000 2 NaN NaN 12 20200814002203 11012 2020 00164742 005380 OFS 재무제표 BS 재무상태표 비유동자산 제 53 기반기말 2020.06.30 현재 53,002,258,000,000 제 52 기말 2019.12.31 현재 51,810,427,000,000 4 NaN NaN 13 20200814002203 11012 2020 00164742 005380 OFS 재무제표 BS 재무상태표 자산총계 제 53 기반기말 2020.06.30 현재 74,466,283,000,000 제 52 기말 2019.12.31 현재 74,157,219,000,000 6 NaN NaN 14 20200814002203 11012 2020 00164742 005380 OFS 재무제표 BS 재무상태표 유동부채 제 53 기반기말 2020.06.30 현재 14,648,064,000,000 제 52 기말 2019.12.31 현재 15,148,868,000,000 8 NaN NaN 15 20200814002203 11012 2020 00164742 005380 OFS 재무제표 BS 재무상태표 비유동부채 제 53 기반기말 2020.06.30 현재 6,046,491,000,000 제 52 기말 2019.12.31 현재 5,089,342,000,000 10 NaN NaN 16 20200814002203 11012 2020 00164742 005380 OFS 재무제표 BS 재무상태표 부채총계 제 53 기반기말 2020.06.30 현재 20,694,555,000,000 제 52 기말 2019.12.31 현재 20,238,210,000,000 12 NaN NaN 17 20200814002203 11012 2020 00164742 005380 OFS 재무제표 BS 재무상태표 자본금 제 53 기반기말 2020.06.30 현재 1,488,993,000,000 제 52 기말 2019.12.31 현재 1,488,993,000,000 15 NaN NaN 18 20200814002203 11012 2020 00164742 005380 OFS 재무제표 BS 재무상태표 이익잉여금 제 53 기반기말 2020.06.30 현재 50,171,398,000,000 제 52 기말 2019.12.31 현재 49,870,324,000,000 19 NaN NaN 19 20200814002203 11012 2020 00164742 005380 OFS 재무제표 BS 재무상태표 자본총계 제 53 기반기말 2020.06.30 현재 53,771,728,000,000 제 52 기말 2019.12.31 현재 53,919,009,000,000 22 NaN NaN 20 20200814002203 11012 2020 00164742 005380 OFS 재무제표 IS 손익계산서 매출액 제 53 기반기 2020.01.01 ~ 2020.06.30 12,131,110,000,000 제 52 기반기 2019.01.01 ~ 2019.06.30 12,952,915,000,000 24 23,406,075,000,000 24,229,847,000,000 21 20200814002203 11012 2020 00164742 005380 OFS 재무제표 IS 손익계산서 영업이익 제 53 기반기 2020.01.01 ~ 2020.06.30 651,424,000,000 제 52 기반기 2019.01.01 ~ 2019.06.30 673,872,000,000 26 1,051,097,000,000 909,143,000,000 22 20200814002203 11012 2020 00164742 005380 OFS 재무제표 IS 손익계산서 법인세차감전 순이익 제 53 기반기 2020.01.01 ~ 2020.06.30 646,633,000,000 제 52 기반기 2019.01.01 ~ 2019.06.30 1,253,852,000,000 28 1,351,910,000,000 2,156,586,000,000 23 20200814002203 11012 2020 00164742 005380 OFS 재무제표 IS 손익계산서 당기순이익 제 53 기반기 2020.01.01 ~ 2020.06.30 482,965,000,000 제 52 기반기 2019.01.01 ~ 2019.06.30 1,017,689,000,000 30 1,097,124,000,000 1,812,538,000,000 def finstate(company, year, reprt_code): try: fs = dart.finstate(company, year, reprt_code = reprt_code) fs_cfs = fs[fs['fs_div'].str.contains('CFS')] fs_revenue= fs_cfs[fs_cfs['account_nm'].str.contains('매출액')] TotalSales = fs_revenue['thstrm_amount'].iloc[0].replace(',', '').strip() TotalSales = int(TotalSales) rcept_no = fs_revenue['rcept_no'].iloc[0].replace(',', '').strip() rows.append({'rcept_no':rcept_no, 'TotalSales':TotalSales}) except: pass return rows df = pd.DataFrame() rows =[] for i in year: for m in reprt_code: finstate(company, i, m) temp = pd.DataFrame(rows) df = pd.concat([df, temp]) df.drop_duplicates('rcept_no', inplace=True) df.sort_values(by='rcept_no', inplace=True) for i in range(df.shape[0] // 4): df.iloc[4*(i+1) -1, 1] = df.iloc[4*(i+1) -1, 1] - df.iloc[4*(i+1) -2, 1] - df.iloc[4*(i+1) -3, 1] - df.iloc[4*(i+1) -4, 1] df rcept_no TotalSales 0 20160516003065 22350624000000 1 20160816001662 24676726000000 2 20161114002002 22083670000000 3 20170331004820 24538004000000 4 20170515004197 23365959000000 5 20170814002062 24308002000000 6 20171114002108 24201273000000 7 20180402004162 24500845000000 8 20180515002108 22436561000000 9 20180814002199 24711802000000 10 20181114002234 24433735000000 11 20190401004132 25230511000000 12 20190515002011 23987079000000 13 20190814002230 26966353000000 14 20191114001732 26968853000000 15 20200330004041 27824137000000 16 20200515002179 25319448000000 17 20200814002203 21858991000000 df2 = df for i, m in enumerate(df['rcept_no']): df2.iloc[i,0] = m[2:4] + m[4:6] df2 rcept_no TotalSales 0 1605 22350624000000 1 1608 24676726000000 2 1611 22083670000000 3 1703 24538004000000 4 1705 23365959000000 5 1708 24308002000000 6 1711 24201273000000 7 1804 24500845000000 8 1805 22436561000000 9 1808 24711802000000 10 1811 24433735000000 11 1904 25230511000000 12 1905 23987079000000 13 1908 26966353000000 14 1911 26968853000000 15 2003 27824137000000 16 2005 25319448000000 17 2008 21858991000000 import matplotlib.pyplot as plt from matplotlib import font_manager, rc import matplotlib as mpl mpl.rc('font', family='Gulim') # 한글폰트 선택 %matplotlib inline plt.figure(figsize=(12, 5)) plt.bar(df2['rcept_no'], df2['TotalSales']) &lt;BarContainer object of 18 artists&gt;",
    "tags": "stock",
    "url": "/stock/2020/09/21/dart.html"
  },{
    "title": "corona &amp; stock price",
    "text": "코로나와 주가 비교 주요국 코로나 사망자 와 코스피 비교 참조 : https://ourworldindata.org/coronavirus 데이터 : https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv 주가 : FinanceDataReader import pandas as pd import FinanceDataReader as fdr import matplotlib.pyplot as plt from matplotlib import font_manager, rc %matplotlib inline import matplotlib as mpl mpl.rc('font', family='Gulim') # 한글폰트 선택 # 맥OS인 경우 위 두 줄을 입력하지 말고 아래 코드를 입력하세요 # rc('font', family='AppleGothic') death = pd.read_csv('https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv') death.shape (44785, 41) death.head() iso_code continent location date total_cases new_cases new_cases_smoothed total_deaths new_deaths new_deaths_smoothed ... gdp_per_capita extreme_poverty cardiovasc_death_rate diabetes_prevalence female_smokers male_smokers handwashing_facilities hospital_beds_per_thousand life_expectancy human_development_index 0 AFG Asia Afghanistan 2019-12-31 0.0 0.0 NaN 0.0 0.0 NaN ... 1803.987 NaN 597.029 9.59 NaN NaN 37.746 0.5 64.83 0.498 1 AFG Asia Afghanistan 2020-01-01 0.0 0.0 NaN 0.0 0.0 NaN ... 1803.987 NaN 597.029 9.59 NaN NaN 37.746 0.5 64.83 0.498 2 AFG Asia Afghanistan 2020-01-02 0.0 0.0 NaN 0.0 0.0 NaN ... 1803.987 NaN 597.029 9.59 NaN NaN 37.746 0.5 64.83 0.498 3 AFG Asia Afghanistan 2020-01-03 0.0 0.0 NaN 0.0 0.0 NaN ... 1803.987 NaN 597.029 9.59 NaN NaN 37.746 0.5 64.83 0.498 4 AFG Asia Afghanistan 2020-01-04 0.0 0.0 NaN 0.0 0.0 NaN ... 1803.987 NaN 597.029 9.59 NaN NaN 37.746 0.5 64.83 0.498 5 rows × 41 columns kor = death[death['location'] == 'South Korea'] kor_death = kor[['date','total_cases','new_cases','total_deaths','new_deaths']] kor_death.iloc[:,0] = kor_death.iloc[:,0].astype('datetime64[ns]') kor_death.set_index(\"date\", inplace=True) kor_death C:\\Users\\masun\\anaconda3\\lib\\site-packages\\pandas\\core\\indexing.py:965: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy self.obj[item] = s total_cases new_cases total_deaths new_deaths date 2019-12-31 0.0 0.0 0.0 0.0 2020-01-01 0.0 0.0 0.0 0.0 2020-01-02 0.0 0.0 0.0 0.0 2020-01-03 0.0 0.0 0.0 0.0 2020-01-04 0.0 0.0 0.0 0.0 ... ... ... ... ... 2020-09-15 22391.0 106.0 367.0 4.0 2020-09-16 22504.0 113.0 367.0 0.0 2020-09-17 22657.0 153.0 372.0 5.0 2020-09-18 22783.0 126.0 377.0 5.0 2020-09-19 22893.0 110.0 378.0 1.0 264 rows × 4 columns usa = death[death['location'] == 'United States'] usa_death = usa[['date','total_cases','new_cases','total_deaths','new_deaths']] usa_death.iloc[:,0] = usa_death.iloc[:,0].astype('datetime64[ns]') usa_death.set_index(\"date\", inplace=True) usa_death C:\\Users\\masun\\anaconda3\\lib\\site-packages\\pandas\\core\\indexing.py:965: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy self.obj[item] = s total_cases new_cases total_deaths new_deaths date 2019-12-31 0.0 0.0 0.0 0.0 2020-01-01 0.0 0.0 0.0 0.0 2020-01-02 0.0 0.0 0.0 0.0 2020-01-03 0.0 0.0 0.0 0.0 2020-01-04 0.0 0.0 0.0 0.0 ... ... ... ... ... 2020-09-15 6554820.0 34841.0 194530.0 451.0 2020-09-16 6606293.0 51473.0 195937.0 1407.0 2020-09-17 6630891.0 24598.0 196802.0 865.0 2020-09-18 6674458.0 43567.0 197633.0 831.0 2020-09-19 6724667.0 50209.0 198589.0 956.0 264 rows × 4 columns chi = death[death['location'] == 'China'] chi_death = chi[['date','total_cases','new_cases','total_deaths','new_deaths']] chi_death.iloc[:,0] = chi_death.iloc[:,0].astype('datetime64[ns]') chi_death.set_index(\"date\", inplace=True) chi_death C:\\Users\\masun\\anaconda3\\lib\\site-packages\\pandas\\core\\indexing.py:965: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy self.obj[item] = s total_cases new_cases total_deaths new_deaths date 2019-12-31 27.0 27.0 0.0 0.0 2020-01-01 27.0 0.0 0.0 0.0 2020-01-02 27.0 0.0 0.0 0.0 2020-01-03 44.0 17.0 0.0 0.0 2020-01-04 44.0 0.0 0.0 0.0 ... ... ... ... ... 2020-09-15 90219.0 22.0 4735.0 1.0 2020-09-16 90243.0 24.0 4736.0 1.0 2020-09-17 90250.0 7.0 4736.0 0.0 2020-09-18 90294.0 44.0 4736.0 0.0 2020-09-19 90308.0 14.0 4737.0 1.0 264 rows × 4 columns jap = death[death['location'] == 'Japan'] jap_death = jap[['date','total_cases','new_cases','total_deaths','new_deaths']] jap_death.iloc[:,0] = jap_death.iloc[:,0].astype('datetime64[ns]') jap_death.set_index(\"date\", inplace=True) jap_death C:\\Users\\masun\\anaconda3\\lib\\site-packages\\pandas\\core\\indexing.py:965: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy self.obj[item] = s total_cases new_cases total_deaths new_deaths date 2019-12-31 0.0 0.0 0.0 0.0 2020-01-01 0.0 0.0 0.0 0.0 2020-01-02 0.0 0.0 0.0 0.0 2020-01-03 0.0 0.0 0.0 0.0 2020-01-04 0.0 0.0 0.0 0.0 ... ... ... ... ... 2020-09-15 75958.0 301.0 1451.0 9.0 2020-09-16 76448.0 490.0 1461.0 10.0 2020-09-17 77009.0 561.0 1473.0 12.0 2020-09-18 77494.0 485.0 1482.0 9.0 2020-09-19 78073.0 579.0 1495.0 13.0 264 rows × 4 columns df_u = fdr.DataReader('DJI', '2001-03-01') # 다우지수 df_u['Close'].plot() &lt;matplotlib.axes._subplots.AxesSubplot at 0x1ce9c6c4688&gt; df_k = fdr.DataReader('KS11', '2001-01-01') # 코스피 지수 df_k['Close'].plot() &lt;matplotlib.axes._subplots.AxesSubplot at 0x1ce9c9f2608&gt; 나스닥 - 코로나사망자 관계 # 관련 계수 start_date = '2020-01-01' fig, ax0 = plt.subplots(figsize=(8,4)) ax1 = ax0.twinx() ax0.set_title(\"nasdaq - corona\") ax0.plot(df_u['Close'][start_date:], 'r-') ax0.set_ylabel(\"종가\") ax0.grid(False) ax1.plot(usa_death['new_deaths'][start_date:], 'g:', label=\"사망자수\") ax1.set_ylabel(\"사망자\") ax1.grid(False) ax0.set_xlabel(\"시간\") plt.show() fig, ax0 = plt.subplots(figsize=(8,4)) ax1 = ax0.twinx() ax0.set_title(\"kospi - corona\") ax0.plot(df_u['Close'][start_date:], 'r-') ax0.set_ylabel(\"종가\") ax0.grid(False) ax1.plot(kor_death['new_deaths'][start_date:], 'b:', label=\"사망자수\") ax1.set_ylabel(\"사망자\") ax1.grid(False) ax0.set_xlabel(\"시간\") plt.show() 각국 코로나 발생시점 비교를 위한 국가별 코로나 누계 (log_scale) start_date = '2020-01-15' plt.figure(figsize=(13,5)) plt.title(\"국가별 코로나 누계 (log_scale)\") plt.plot(np.log(chi_death[\"total_cases\"]+1), label = \"CHI\") plt.plot(np.log(kor_death[\"total_cases\"]+1), label = \"KOR\") plt.plot(np.log(usa_death[\"total_cases\"]+1), label = \"USA\") plt.plot(np.log(jap_death[\"total_cases\"]+1), label = \"JAP\") plt.legend() plt.show()",
    "tags": "stock",
    "url": "/stock/2020/09/19/corona_200919.html"
  },{
    "title": "stock using RIM",
    "text": "RIM 기법 분석 RIM 기법을 활용한 기업 주가분석 1) kosip100 기업분석 2) 코스피 전종목 분석 (992개) 주가데이터 : FinanceDataReader 재무제표 : fnguide 크롤링 import pandas as pd import FinanceDataReader as fdr import matplotlib.pyplot as plt from matplotlib import font_manager, rc import matplotlib as mpl mpl.rc('font', family='Gulim') # 한글폰트 선택 %matplotlib inline RIM 계수 입력 ke = 7.96 # 할인율 : 신용평가의 BBB- 5년 등급에 해당하 요구수익률 w = 1 # 지속계수 w1 = 0.9 # 지속계수 할인율 10프로 w2 = 0.8 # 지속계수 할인율 20프로 day = 'Annual_2019/12' year = '2018' # 현주가 표시시점 종목 불러오기 # 1) 코스피100 종목 불러오기 company_list = pd.read_excel('kospi100_list.xls', dtype=str) company = company_list['Symbol'] # 2) 코스피 전종목 불러오기 \"\"\" KOSPI_list = fdr.StockListing('KOSPI') company = KOSPI_list.head(10).dropna()['Symbol'] company \"\"\" \"\\nKOSPI_list = fdr.StockListing('KOSPI')\\ncompany = KOSPI_list.head(10).dropna()['Symbol']\\ncompany\\n\" 재무제표 불러오기 def Df(company): try: url_tmpl = 'http://comp.fnguide.com/SVO2/ASP/SVD_Main.asp?pGB=1&amp;gicode=A%s&amp;cID=&amp;MenuYn=Y&amp;ReportGB=D&amp;NewMenuID=Y&amp;stkGb=701' # fnguide url = url_tmpl % (company) tables = pd.read_html(url, encoding='utf-8') ## 1. 재무제표 df1=tables[10] col = [] for a, b in df1.columns: c = a + '_' +b col.append(c) col[0] = '분류' df1.columns = col df1.set_index('분류', inplace =True) df1 ## 2. 발행주식수 (일반주 + 우선주) 계산 df2 = tables[0] df2.set_index(0, inplace =True) num = df2.loc['발행주식수(보통주/ 우선주)', 1] num_temp = num.split('/ ') num1 = int(num_temp[0].replace(',', '')) num2 = int(num_temp[1].replace(',', '')) enroll_num = num1 + num2 enroll_num ## 3. 자기주식 확인 df3 = tables[4] df3_temp = df3.set_index('주주구분') df3_temp.fillna(0,inplace=True) my_stock = int(df3_temp.iloc[4, 2]) my_stock num_stock = enroll_num - my_stock except: pass return df1, num_stock RIM 계산 def Rim(company, day): try: # 자기자본 및 ROE 계산 asset = df1.loc['지배주주지분', day] roe = df1.loc['ROE', day] # 적정주가 계산 v = asset + (asset*(roe/100 - ke/100) * w) / (1 + ke/100 -w) fair_price = v*100000000/num_stock if roe &gt;= ke: v1 = asset + (asset*(roe/100 - ke/100) * w1) / (1 + ke/100 -w1) v2 = asset + (asset*(roe/100 - ke/100) * w2) / (1 + ke/100 -w2) else: v1 = 0 v2 = 0 fair_price1 = v1*100000000/num_stock fair_price2 = v2*100000000/num_stock rows.append({'회사코드' : company, '회사이름' : company_list[company_list['Symbol'] == company].iloc[0,-1], '자기자본' : asset, #억원 'ROE' : roe, '기업가치' : v, '발행주식수' : num_stock, '적정주가' : int(fair_price), '할인주가_10' : int(fair_price1), '할인주가_20' : int(fair_price2)}) except: pass return rows rim = pd.DataFrame() rows = [] for i in company: df1, num_stock = Df(i) Rim(i, day) rim1 = rim.append(rows) rim1 회사코드 회사이름 자기자본 ROE 기업가치 발행주식수 적정주가 할인주가_10 할인주가_20 0 005930 삼성전자 2549155.0 8.69 2.782934e+06 6792669250 40969 38900 38311 1 000660 SK하이닉스 479284.0 4.25 2.558991e+05 728002359 35150 0 0 2 035420 NAVER 58052.0 10.56 7.701371e+04 164263384 46884 39945 37969 3 051910 LG화학 170050.0 1.84 3.930804e+04 78281141 50213 0 0 4 068270 셀트리온 27942.0 11.19 3.928027e+04 134993738 29097 24049 22611 ... ... ... ... ... ... ... ... ... ... 94 003410 쌍용양회 18025.0 7.01 1.587378e+04 505403280 3140 0 0 95 047050 포스코인터내셔널 30477.0 7.06 2.703111e+04 123375149 21909 0 0 96 051600 한전KPS 10634.0 14.98 2.001223e+04 45000000 44471 31944 28377 97 047040 대우건설 24587.0 8.80 2.718161e+04 415622637 6539 6164 6057 98 088350 한화생명 126859.0 0.87 1.386524e+04 868529987 1596 0 0 99 rows × 9 columns 현재주가 불러오기 rim2 = rim1.set_index('회사코드') for i in rim2.index: tmp_price = fdr.DataReader(i).iloc[-1, 3] rim2.loc[i ,'현주가'] = tmp_price rim2['주가차_비'] = (rim2['적정주가'] - rim2['현주가'])/rim2['현주가'] rim2.sort_values(by='주가차_비', ascending = False, inplace = True) rim2[rim2['주가차_비'] &gt;=0] 회사이름 자기자본 ROE 기업가치 발행주식수 적정주가 할인주가_10 할인주가_20 현주가 주가차_비 회사코드 138930 BNK금융지주 82837.0 7.07 73575.074121 325935246 22573 0 0 5140.0 3.391634 086790 하나금융지주 281245.0 8.77 309864.152010 300242060 103204 97474 95843 28150.0 2.666217 004170 신세계 39265.0 14.24 70242.914573 9845181 713475 524334 470487 215500.0 2.310789 055550 신한지주 391779.0 9.09 447395.868090 494878835 90405 83649 81726 28350.0 2.188889 024110 기업은행 226618.0 7.36 209536.241206 836636680 25045 0 0 8000.0 2.130625 006360 GS건설 39747.0 11.79 58871.498744 80097804 73499 59147 55061 25100.0 1.928247 105560 KB금융 385339.0 8.92 431812.045226 415807914 103848 97130 95217 37750.0 1.750940 000210 대림산업 59373.0 11.74 87567.716080 38600000 226859 182952 170451 83500.0 1.716874 071050 한국금융지주 50037.0 18.14 114029.042714 61584238 185159 122697 104915 78100.0 1.370794 078930 GS 88778.0 6.26 69817.874372 94700204 73725 0 0 32800.0 1.247713 047040 대우건설 24587.0 8.80 27181.608040 415622637 6539 6164 6057 2925.0 1.235556 005940 NH투자증권 53851.0 9.12 61698.633166 300279855 20547 18976 18528 9320.0 1.204614 028050 삼성엔지니어링 13228.0 24.61 40897.120603 196000000 20865 12380 9964 11150.0 0.871300 069960 현대백화점 42420.0 4.64 24727.236181 23402436 105660 0 0 56800.0 0.860211 016360 삼성증권 49493.0 8.15 50674.365578 89300000 56746 55950 55724 31200.0 0.818782 001450 현대해상 45104.0 6.23 35301.246231 89399989 39486 0 0 22850.0 0.728053 081660 휠라홀딩스 12497.0 23.81 37381.101759 60752222 61530 36908 29899 37000.0 0.662973 051600 한전KPS 10634.0 14.98 20012.226131 45000000 44471 31944 28377 28000.0 0.588250 047050 포스코인터내셔널 30477.0 7.06 27031.108040 123375149 21909 0 0 13850.0 0.581877 005830 DB손해보험 59490.0 6.84 51119.547739 70799985 72202 0 0 45700.0 0.579912 000720 현대건설 66626.0 6.30 52731.633166 111454621 47312 0 0 32100.0 0.473894 005490 POSCO 444719.0 4.18 233533.344221 87186826 267853 0 0 192000.0 0.395068 029780 삼성카드 68964.0 5.04 43665.648241 115858884 37688 0 0 28900.0 0.304083 012330 현대모비스 323300.0 7.28 295681.407035 95058667 311051 0 0 240000.0 0.296046 030200 KT 136668.0 4.61 79150.688442 261111802 30312 0 0 23400.0 0.295385 241560 두산밥캣 39791.0 7.05 35242.028894 100249166 35154 0 0 27250.0 0.290055 011170 롯데케미칼 132044.0 5.51 91402.316583 34275419 266670 0 0 209500.0 0.272888 161390 한국타이어앤테크놀로 71568.0 6.03 54215.457286 123875068 43766 0 0 34400.0 0.272267 000270 기아차 289781.0 6.50 236630.213568 405363346 58374 0 0 47800.0 0.221213 086280 현대글로비스 46703.0 11.25 66006.124372 37500000 176016 145074 136264 147500.0 0.193329 033780 KT&amp;G 86506.0 12.39 134649.414573 137292488 98074 76996 70995 83100.0 0.180193 006800 미래에셋대우 91278.0 7.56 86691.165829 799392137 10844 0 0 9200.0 0.178696 001040 CJ 45096.0 6.24 35351.638191 35663726 99124 0 0 85800.0 0.155291 011780 금호석유 26286.0 11.84 39098.773869 33491159 116743 93746 87199 102000.0 0.144539 010130 고려아연 67154.0 9.76 82339.577889 18869994 436351 387977 374205 392000.0 0.113140 032640 LG유플러스 70809.0 6.30 56042.298995 436611361 12835 0 0 11700.0 0.097009 032830 삼성생명 356670.0 3.03 135767.600503 199999990 67883 0 0 62900.0 0.079221 088350 한화생명 126859.0 0.87 13865.242462 868529987 1596 0 0 1565.0 0.019808 003550 LG 188270.0 5.87 138837.298995 175871808 78942 0 0 78900.0 0.000532 price = pd.DataFrame() for n, i in enumerate(rim2.index): tmp_stock_price = fdr.DataReader(i, year) price[i] = tmp_stock_price['Close'] 특정조건 그래프 그리기 rim3 = rim2[(rim2['주가차_비'] &gt;=0)] rim3 회사이름 자기자본 ROE 기업가치 발행주식수 적정주가 할인주가_10 할인주가_20 현주가 주가차_비 회사코드 138930 BNK금융지주 82837.0 7.07 73575.074121 325935246 22573 0 0 5140.0 3.391634 086790 하나금융지주 281245.0 8.77 309864.152010 300242060 103204 97474 95843 28150.0 2.666217 004170 신세계 39265.0 14.24 70242.914573 9845181 713475 524334 470487 215500.0 2.310789 055550 신한지주 391779.0 9.09 447395.868090 494878835 90405 83649 81726 28350.0 2.188889 024110 기업은행 226618.0 7.36 209536.241206 836636680 25045 0 0 8000.0 2.130625 006360 GS건설 39747.0 11.79 58871.498744 80097804 73499 59147 55061 25100.0 1.928247 105560 KB금융 385339.0 8.92 431812.045226 415807914 103848 97130 95217 37750.0 1.750940 000210 대림산업 59373.0 11.74 87567.716080 38600000 226859 182952 170451 83500.0 1.716874 071050 한국금융지주 50037.0 18.14 114029.042714 61584238 185159 122697 104915 78100.0 1.370794 078930 GS 88778.0 6.26 69817.874372 94700204 73725 0 0 32800.0 1.247713 047040 대우건설 24587.0 8.80 27181.608040 415622637 6539 6164 6057 2925.0 1.235556 005940 NH투자증권 53851.0 9.12 61698.633166 300279855 20547 18976 18528 9320.0 1.204614 028050 삼성엔지니어링 13228.0 24.61 40897.120603 196000000 20865 12380 9964 11150.0 0.871300 069960 현대백화점 42420.0 4.64 24727.236181 23402436 105660 0 0 56800.0 0.860211 016360 삼성증권 49493.0 8.15 50674.365578 89300000 56746 55950 55724 31200.0 0.818782 001450 현대해상 45104.0 6.23 35301.246231 89399989 39486 0 0 22850.0 0.728053 081660 휠라홀딩스 12497.0 23.81 37381.101759 60752222 61530 36908 29899 37000.0 0.662973 051600 한전KPS 10634.0 14.98 20012.226131 45000000 44471 31944 28377 28000.0 0.588250 047050 포스코인터내셔널 30477.0 7.06 27031.108040 123375149 21909 0 0 13850.0 0.581877 005830 DB손해보험 59490.0 6.84 51119.547739 70799985 72202 0 0 45700.0 0.579912 000720 현대건설 66626.0 6.30 52731.633166 111454621 47312 0 0 32100.0 0.473894 005490 POSCO 444719.0 4.18 233533.344221 87186826 267853 0 0 192000.0 0.395068 029780 삼성카드 68964.0 5.04 43665.648241 115858884 37688 0 0 28900.0 0.304083 012330 현대모비스 323300.0 7.28 295681.407035 95058667 311051 0 0 240000.0 0.296046 030200 KT 136668.0 4.61 79150.688442 261111802 30312 0 0 23400.0 0.295385 241560 두산밥캣 39791.0 7.05 35242.028894 100249166 35154 0 0 27250.0 0.290055 011170 롯데케미칼 132044.0 5.51 91402.316583 34275419 266670 0 0 209500.0 0.272888 161390 한국타이어앤테크놀로 71568.0 6.03 54215.457286 123875068 43766 0 0 34400.0 0.272267 000270 기아차 289781.0 6.50 236630.213568 405363346 58374 0 0 47800.0 0.221213 086280 현대글로비스 46703.0 11.25 66006.124372 37500000 176016 145074 136264 147500.0 0.193329 033780 KT&amp;G 86506.0 12.39 134649.414573 137292488 98074 76996 70995 83100.0 0.180193 006800 미래에셋대우 91278.0 7.56 86691.165829 799392137 10844 0 0 9200.0 0.178696 001040 CJ 45096.0 6.24 35351.638191 35663726 99124 0 0 85800.0 0.155291 011780 금호석유 26286.0 11.84 39098.773869 33491159 116743 93746 87199 102000.0 0.144539 010130 고려아연 67154.0 9.76 82339.577889 18869994 436351 387977 374205 392000.0 0.113140 032640 LG유플러스 70809.0 6.30 56042.298995 436611361 12835 0 0 11700.0 0.097009 032830 삼성생명 356670.0 3.03 135767.600503 199999990 67883 0 0 62900.0 0.079221 088350 한화생명 126859.0 0.87 13865.242462 868529987 1596 0 0 1565.0 0.019808 003550 LG 188270.0 5.87 138837.298995 175871808 78942 0 0 78900.0 0.000532 num = rim3.shape[0] fig = plt.figure(figsize=(15, 2.5 * num)) for n, i in enumerate(rim3.index): plt.subplot(round(num/2)+1, 2, n+1) plt.plot(price[i]) plt.axhline(y=rim3.loc[i, '적정주가'], color='b', ls=':', label='적정주가') if rim3.loc[i, '할인주가_10'] != 0 : plt.axhline(y=rim3.loc[i, '할인주가_10'], color='#8c8aff', ls=':', label='할인주가_10') plt.axhline(y=rim3.loc[i, '할인주가_20'], color='#d2d1ff', ls=':', label='할인주가_20') plt.legend() plt.title(company_list[company_list['Symbol'] == i].iloc[0,-1])",
    "tags": "stock",
    "url": "/stock/2020/09/19/Rim_200906.html"
  },{
    "title": "post-sample5",
    "text": "post-sample Hello! This is code print 'hello world'",
    "tags": "python",
    "url": "/python/2020/01/05/post5.html"
  },{
    "title": "post-sample4",
    "text": "post-sample Hello! This is code print 'hello world'",
    "tags": "python",
    "url": "/python/2020/01/04/post4.html"
  },{
    "title": "Welcome to Jekyll!",
    "text": "You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated. Jekyll requires blog post files to be named according to the following format: YEAR-MONTH-DAY-title.MARKUP Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and MARKUP is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works. Jekyll also offers powerful support for code snippets: def print_hi(name) puts \"Hi, #{name}\" end print_hi('Tom') #=&gt; prints 'Hi, Tom' to STDOUT. Check out the Jekyll docs for more info on how to get the most out of Jekyll. File all bugs/feature requests at Jekyll’s GitHub repo. If you have questions, you can ask them on Jekyll Talk.",
    "tags": "jekyll update",
    "url": "/jekyll/update/2020/01/02/welcome-to-jekyll.html"
  },{
    "title": "post-sample",
    "text": "post-sample Hello! This is code print 'hello world'",
    "tags": "sample",
    "url": "/sample/2020/01/02/post2.html"
  },{
    "title": "post-sample2",
    "text": "post-sample Hello! This is code print 'hello world'",
    "tags": "sample",
    "url": "/sample/2020/01/02/post1.html"
  }]};
